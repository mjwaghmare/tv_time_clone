analyzer:
  errors:
    # treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # treat missing returns as a warning (not a hint)
    missing_return: warning
    avoid_print: warning
    # allow having TODOs in the code
    todo: ignore

linter:
  rules:

    # All non nullable named parameters should be and annotated with @required.
    # This allows API consumers to get warnings via lint rather than a crash a runtime.
    # Might become obsolete with Non-Nullable types
    # pedantic: enabled
    # http://dart-lang.github.io/linter/lints/always_require_non_null_named_parameters.html
    - always_require_non_null_named_parameters



    # Protect against unintentionally overriding superclass members
    # pedantic: enabled
    # http://dart-lang.github.io/linter/lints/annotate_overrides.html
    - annotate_overrides

    # All methods should define a return type. dynamic is no exception.
    # Violates Effective Dart "PREFER annotating with dynamic instead of letting inference fail"
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/avoid_annotating_with_dynamic.html
    - avoid_annotating_with_dynamic



    # Highlights boolean expressions which can be simplified
    # http://dart-lang.github.io/linter/lints/avoid_bool_literals_in_conditional_expressions.html
    - avoid_bool_literals_in_conditional_expressions


    # Errors aren't for catching but to prevent prior to runtime
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/avoid_catching_errors.html
    - avoid_catching_errors



    # Prevents accidental empty else cases. See samples in documentation
    # pedantic: enabled
    # http://dart-lang.github.io/linter/lints/avoid_empty_else.html
    - avoid_empty_else



    # Use different quotes instead of escaping
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/avoid_escaping_inner_quotes.html
    - avoid_escaping_inner_quotes

    # Prevents unnecessary allocation of a field
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/avoid_field_initializers_in_const_classes.html
    - avoid_field_initializers_in_const_classes

    # Prevents allocating a lambda and allows return/break/continue control flow statements inside the loop
    # http://dart-lang.github.io/linter/lints/avoid_function_literals_in_foreach_calls.html
    - avoid_function_literals_in_foreach_calls

    # Don't break value types by implementing them
    # http://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    - avoid_implementing_value_types

    # Removes redundant `= null;`
    # https://dart-lang.github.io/linter/lints/avoid_init_to_null.html
    - avoid_init_to_null



    # Null checks aren't required in ==() operators
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    - avoid_null_checks_in_equality_operators



    # Don't explicitly set defaults
    # Dart SDK: >= 2.8.0-dev.1.0 • (Linter v0.1.107)
    # https://dart-lang.github.io/linter/lints/avoid_redundant_argument_values.html
    - avoid_redundant_argument_values


    # Setters always return void, therefore defining void is redundant
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    - avoid_return_types_on_setters


    # Don't use `Future?`, therefore never return null instead of a Future.
    # Will become obsolete one Non-Nullable types land
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_future.html
    - avoid_returning_null_for_future

    # Use empty returns, don't show off with you knowledge about dart internals.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_void.html
    - avoid_returning_null_for_void


    # Prevents logical inconsistencies. It's good practice to define getters for all existing setters.
    # https://dart-lang.github.io/linter/lints/avoid_setters_without_getters.html
    - avoid_setters_without_getters

    # Don't reuse a type parameter when on with the same name already exists in the same scope
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/avoid_shadowing_type_parameters.html
    - avoid_shadowing_type_parameters

    # A single cascade operator can be replaced with a normal method call
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/avoid_single_cascade_in_expression_statements.html
    - avoid_single_cascade_in_expression_statements


    # Don't use a parameter names which can be confused with a types (i.e. int, bool, num, ...)
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/avoid_types_as_parameter_names.html
    - avoid_types_as_parameter_names


    # Containers without parameters have no effect and can be removed
    # https://dart-lang.github.io/linter/lints/avoid_unnecessary_containers.html
    - avoid_unnecessary_containers

    # Unused parameters should be removed
    # https://dart-lang.github.io/linter/lints/avoid_unused_constructor_parameters.html
    - avoid_unused_constructor_parameters


    # Flutter mobile only: Web packages aren't available in mobile flutter apps
    # https://dart-lang.github.io/linter/lints/avoid_web_libraries_in_flutter.html
    - avoid_web_libraries_in_flutter

    # Use the await keyword only for futures. There is nothing to await in synchronous code
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/await_only_futures.html
    - await_only_futures

    # Follow the style guide and use UpperCamelCase for extensions
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/camel_case_extensions.html
    - camel_case_extensions

    # Follow the style guide and use UpperCamelCase for class names and typedefs
    # https://dart-lang.github.io/linter/lints/camel_case_types.html
    - camel_case_types

    # Prevents leaks and code executing after their lifecycle.
    # Discussion https://github.com/passsy/dart-lint/issues/4
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/cancel_subscriptions.html
    - cancel_subscriptions



    # Prevents hard to debug code
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/control_flow_in_finally.html
    - control_flow_in_finally

    # Single line `if`s are fine, but when a new line splits the bool expression and body curly braces
    # are recommended. It prevents the danging else problem and easily allows the addition of more lines inside
    # the if body
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/curly_braces_in_flow_control_structures.html
    - curly_braces_in_flow_control_structures



    # Follows dart style. Fully supported by IDEs and no manual effort for a consistent style
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/directives_ordering.html
    - directives_ordering


    # Add a comment why no further error handling is required
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/empty_catches.html
    - empty_catches

    # Removed empty constructor bodies
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/empty_constructor_bodies.html
    - empty_constructor_bodies

    # Don't allow empty if bodies. Works together with curly_braces_in_flow_control_structures
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/empty_statements.html
    - empty_statements

    # Enums aren't powerful enough, now enum like classes get the same linting support
    # pedantic: disabled
    # Dart SDK: >= 2.9.0-12.0.dev • (Linter v0.1.116)
    # https://dart-lang.github.io/linter/lints/exhaustive_cases.html
    - exhaustive_cases


    # hashCode and equals need to be consistent. One can't live without another.
    # https://dart-lang.github.io/linter/lints/hash_and_equals.html
    - hash_and_equals

    # DON'T import implementation files from another package.
    # If you need access to some internal code, create an issue
    # https://dart-lang.github.io/linter/lints/implementation_imports.html
    - implementation_imports


    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/invariant_booleans.html
    - invariant_booleans

    # Type check for Iterable<T>.contains(other) where other is! T
    # otherwise contains will always report false. Those errors are usually very hard to catch.
    # https://dart-lang.github.io/linter/lints/iterable_contains_unrelated_type.html
    - iterable_contains_unrelated_type

    # Hint to join return and assignment.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/join_return_with_assignment.html
    - join_return_with_assignment

    # Add leading \n which which makes multiline strings easier to read
    # Dart SDK: >= 2.8.0-dev.16.0 • (Linter v0.1.113)
    # https://dart-lang.github.io/linter/lints/leading_newlines_in_multiline_strings.html
    - leading_newlines_in_multiline_strings

    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/library_names.html
    - library_names

    # Follow dart style
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/library_prefixes.html
    - library_prefixes

    # Nobody wants to manually wrap lines when changing a few words. This rule is too hard to be a "general" rule
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    # - lines_longer_than_80_chars

    # Type check for List<T>.remove(item) where item is! T
    # The list can't contain item. Those errors are not directly obvious especially when refactoring.
    # https://dart-lang.github.io/linter/lints/list_remove_unrelated_type.html
    - list_remove_unrelated_type


    # Don't forget the whitespaces at the end
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/missing_whitespace_between_adjacent_strings.html
    - missing_whitespace_between_adjacent_strings

    # Concat Strings obviously with `+` inside a list.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/no_adjacent_strings_in_list.html
    - no_adjacent_strings_in_list

    # Second case is basically dead code which will never be reached.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/no_duplicate_case_values.html
    - no_duplicate_case_values

    # Flutter only: `createState` shouldn't pass information into the state
    # https://dart-lang.github.io/linter/lints/no_logic_in_create_state.html
    - no_logic_in_create_state

    # calling `runtimeType` may be a performance problem
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/no_runtimeType_toString.html
    - no_runtimeType_toString

    # Follow dart style naming conventions
    # https://dart-lang.github.io/linter/lints/non_constant_identifier_names.html
    - non_constant_identifier_names


    # Might become irrelevant when non-nullable types land in dart. Until then use this lint check which checks for
    # non null arguments for specific dart sdk methods.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/null_closures.html
    - null_closures


    # Highlights unintentionally overridden fields.
    # https://dart-lang.github.io/linter/lints/overridden_fields.html
    - overridden_fields


    # Follow dart style package naming convention
    # https://dart-lang.github.io/linter/lints/package_names.html
    - package_names

    # Seems very rare, especially for applications.
    # https://dart-lang.github.io/linter/lints/package_prefixed_library_names.html
    - package_prefixed_library_names

    # Most likely a mistake, if not: bad practice
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    - parameter_assignments


    # Collection literals are shorter. They exists, use them.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_collection_literals.html
    - prefer_collection_literals

    # Use the ??= operator when possible
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_conditional_assignment.html
    - prefer_conditional_assignment

    # Always use const when possible, make runtime faster
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors.html
    - prefer_const_constructors


    # final is good, const is better
    # https://dart-lang.github.io/linter/lints/prefer_const_declarations.html
    - prefer_const_declarations

    # Always use const when possible, make runtime faster
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_const_literals_to_create_immutables.html
    - prefer_const_literals_to_create_immutables

    # Dart has named constructors. Static methods in other languages (java) are a workaround which don't have
    # named constructors.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html
    - prefer_constructors_over_static_methods

    # Contains may be faster and is easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_contains.html
    - prefer_contains


    # Prevent confusion with call-side when using named parameters
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_equal_for_default_values.html
    - prefer_equal_for_default_values


    # Helps avoid accidental reassignments and allows the compiler to do optimizations.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_final_in_for_each.html
    - prefer_final_in_for_each


    # Saves lot of code
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_for_elements_to_map_fromIterable.html
    - prefer_for_elements_to_map_fromIterable


    # As Dart allows local function declarations, it is a good practice to use them in the place of function literals.
    # https://dart-lang.github.io/linter/lints/prefer_function_declarations_over_variables.html
    - prefer_function_declarations_over_variables

    # For consistency
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_generic_function_type_aliases.html
    - prefer_generic_function_type_aliases

    # Allows potential usage of const
    # https://dart-lang.github.io/linter/lints/prefer_if_elements_to_conditional_expressions.html
    - prefer_if_elements_to_conditional_expressions

    # Dart has a special operator for this, use it
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_if_null_operators.html
    - prefer_if_null_operators

    # Terser code
    # https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html
    - prefer_initializing_formals

    # Easier move towards const, and way easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_inlined_adds.html
    - prefer_inlined_adds


    # Interpolate, use less "", '' and +
    # https://dart-lang.github.io/linter/lints/prefer_interpolation_to_compose_strings.html
    - prefer_interpolation_to_compose_strings

    # Iterables do not necessary know their length
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_is_empty.html
    - prefer_is_empty

    # Easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_is_not_empty.html
    - prefer_is_not_empty

    # Use the `foo is! Foo` instead of `!(foo is Foo)`
    # https://dart-lang.github.io/linter/lints/prefer_is_not_operator.html
    - prefer_is_not_operator

    # Easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_iterable_whereType.html
    - prefer_iterable_whereType


    # Makes expressions with null checks easier to read.
    # https://github.com/flutter/flutter/pull/32711#issuecomment-492930932
    - prefer_null_aware_operators

    # Conflicting with `avoid_relative_lib_imports` which is enforced
    # https://dart-lang.github.io/linter/lints/prefer_relative_imports.html
    - prefer_relative_imports


    # Allows potential usage of const
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_spread_collections.html
    - prefer_spread_collections

    # Define types
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_typing_uninitialized_variables.html
    - prefer_typing_uninitialized_variables

    # Null is not a type, use void
    # https://dart-lang.github.io/linter/lints/prefer_void_to_null.html
    - prefer_void_to_null

    # Document the replacement API
    # https://dart-lang.github.io/linter/lints/provide_deprecation_message.html
    - provide_deprecation_message


    # Hints accidental recursions
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/recursive_getters.html
    - recursive_getters

    # Flutter only, prefer SizedBox over Container which offers a const constructors
    # Dart SDK: >= 2.9.0-4.0.dev • (Linter v0.1.115)
    # https://dart-lang.github.io/linter/lints/sized_box_for_whitespace.html
    - sized_box_for_whitespace

    # Follow dart style use triple slashes
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/slash_for_doc_comments.html
    - slash_for_doc_comments

    # Flutter only, always put child last
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/sort_child_properties_last.html
    - sort_child_properties_last


    # Any sorting is better than no sorting
    # https://dart-lang.github.io/linter/lints/sort_pub_dependencies.html
    - sort_pub_dependencies

    # Default constructor comes first.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/sort_unnamed_constructors_first.html
    - sort_unnamed_constructors_first

    # First test, then cast
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/test_types_in_equals.html
    - test_types_in_equals

    # Hard to debug and bad style
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/throw_in_finally.html
    - throw_in_finally

    # Help the compiler at compile time with non-null asserts rather than crashing at runtime
    # Dart SDK: >= 2.11.0-182.0.dev • (Linter v0.1.120)
    # https://dart-lang.github.io/linter/lints/tighten_type_of_initializing_formals.html
    - tighten_type_of_initializing_formals

    # Type annotations make the compiler intelligent, use them
    # https://dart-lang.github.io/linter/lints/type_annotate_public_apis.html
    - type_annotate_public_apis

    # Don't add types for already typed constructor parameters.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/type_init_formals.html
    - type_init_formals



    # Remove async/await clutter when not required
    # https://dart-lang.github.io/linter/lints/unnecessary_await_in_return.html
    - unnecessary_await_in_return


    # Yes, const everywhere. But not in an already const scope
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_const.html
    - unnecessary_const

    # Getter/setters can be added later on in a non API breaking manner
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_getters_setters.html
    - unnecessary_getters_setters


    # Remove the optional `new` keyword
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_new.html
    - unnecessary_new

    # Don't assign `null` when value is already `null`.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/unnecessary_null_aware_assignments.html
    - unnecessary_null_aware_assignments


    # Don't assign `null` when value is already `null`.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_null_in_if_null_operators.html
    - unnecessary_null_in_if_null_operators


    # Remove overrides which simply call super
    # https://dart-lang.github.io/linter/lints/unnecessary_overrides.html
    - unnecessary_overrides

    # Remove clutter where possible
    # https://dart-lang.github.io/linter/lints/unnecessary_parenthesis.html
    - unnecessary_parenthesis

    # Use raw string only when needed
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/unnecessary_raw_strings.html
    - unnecessary_raw_strings

    # Avoid magic overloads of + operators
    # https://dart-lang.github.io/linter/lints/unnecessary_statements.html
    - unnecessary_statements

    # Remove unnecessary escape characters
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/unnecessary_string_escapes.html
    - unnecessary_string_escapes


    # The variable is clear, remove clutter
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_this.html
    - unnecessary_this

    # Highlights potential bugs where unrelated types are compared with another. (always *not* equal).
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unrelated_type_equality_checks.html
    - unrelated_type_equality_checks

    # Web only
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unsafe_html.html
    - unsafe_html

    # Always use hex syntax Color(0x00000001), never Color(1)
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/use_full_hex_values_for_flutter_colors.html
    - use_full_hex_values_for_flutter_colors

    # Always use generic function type syntax, don't mix styles
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/use_function_type_syntax_for_parameters.html
    - use_function_type_syntax_for_parameters


    # Some might argue late is a code smell, this lint is very opinionated. It triggers only for private fields and
    # therefore might actually cleanup some code.
    # There is no performance impact either way https://github.com/dart-lang/linter/pull/2189#discussion_r457945301
    # Dart SDK: >= 2.10.0-10.0.dev • (Linter v0.1.118)
    # https://dart-lang.github.io/linter/lints/use_late_for_private_fields_and_variables.html
    - use_late_for_private_fields_and_variables

    # Use rethrow to preserve the original stacktrace.
    # https://dart.dev/guides/language/effective-dart/usage#do-use-rethrow-to-rethrow-a-caught-exception
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/use_rethrow_when_possible.html
    - use_rethrow_when_possible

    # Use the setter syntax
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/use_setters_to_change_properties.html
    - use_setters_to_change_properties


    # Catches invalid regular expressions.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/valid_regexps.html
    - valid_regexps

    # Don't assign anything to void
    # https://dart-lang.github.io/linter/lints/void_checks.html
    - void_checks

